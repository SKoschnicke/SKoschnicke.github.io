title: "Modern development workflow"
date: 2011/10/19
slug: modern-development-workflow

Developing high-quality software in little time is hard when you are a single
developer, but it gets even harder when you are a group of developers working
on the same project. Technology can enable us to work better together without
forcing everyone into tight regulations on how, when and where they do their
work.

Of course, without some rules about the workflow, structured collaboration is
unlikely to happen, so there needs to be some rules, but they should not
get into the way of the real work. I will describe a workflow that does just
that by using modern technologies to support developers at every possible
degree.

# Motivation

In every software-project there will be a point where not every developer has
full knowledge about every aspect of the developed software. This may happen
because the team gets so big that the informal information-flow doesn't suffice
to provide everyone with every change made or because new developers join the
team. Even if there are very few developers some details about the software
will be lost after some time because people simply forget things.

Lost knowledge leads to duplication of functions and, at worst, to bugs due to
incorrect usage of functions. In general it reduces the code-quality of the
project.

Another aspect of insufficient information is the problem that with a bigger
number of developers working on an project in parallel, deciding who should do
what gets more difficult. More information has to be exchanged with more people
in order to decide what are the next things to do and who should do it in which
order.

If a developer needs information about a part of the software he doesn't know
and the information is not written down somewhere (as comment, in a
documentation-system or as an automation-script to describe a process) he has
to get it from another developer who has the information. Even if this developer
is available at this time, the information-transfer takes time in which the
both developers can't get other work done.

---

Motivationen

Irgendwann geraet man in die Situation wo selbstorganisiertes Zusammenarbeiten nicht mehr funktioniert weil
- neue Leute zum Team dazukommen
- das Team zu gross wird
- die Codebase zu gross wird, als dass jeder immer alle Teile im Blick behalten kann
- Fehler oder doppelte Implementierungen entstehen, weil der eine nicht weiss was der andere gemacht hat

Warum ein Chat?

Direkte Kommunikation ist meistens klarer und schneller. Aber:
- erfordert oertliche Naehe
- findet nur zwischen zwei Personen statt -> alle anderen bekommen nichts mit
  oder
- alle koennen/muessen (Meeting) mithoeren -> Zeit wird verschwendet da die Leute nicht selbst filtern koennen (Meeting) oder gerade was anderes tun wollen (Grossraumbuero)
- ist synchron, man kann etwas besprochenes nicht spaeter nachlesen

Tools:
- Git, http://whygitisbetterthanx.com
- GitHub
  - Github-Wiki (oder irgendein anderes Wiki)
  - Pull requests zum Code Review und Verteilung von Wissen
- Realtime-Chat: Flowdock / Campfire / IRC / Skype
- Quassum (oder GitHub Issues, PivotalTracker)

Vorteile:
- Asynchronitaet
- Standortunabhaengigkeit
- Wissenstransfer (durch die Pull-Requests)
- Skaliert (GitHub benutzt es mit [to_research] Mitarbeitern)
- Sichtbarkeit (GitHub zeigt, was vorgeht. Ein einfaches SCMS verbirgt dies)

VMs:
- http://programmers.stackexchange.com/questions/114673/should-a-development-machine-be-inside-a-vm
- http://programmers.stackexchange.com/questions/103501/thoughts-on-development-using-virtual-machines
- http://programmers.stackexchange.com/questions/115177/how-to-decrease-errors-before-testing
- http://programmers.stackexchange.com/questions/87152/development-methodology-for-single-web-developer

Weiteres:
- Stackoverflow
- Bezug auf Scrum und Agile Manifesto
- Automatisierung aller Schritte ist wichtig (vor allem build, release, deploy), wird aber nicht weiter behandelt, evtl. kurz erwaehnen
- Wie ein Workflow helfen kann die Qualitaet der Software zu erhoehen http://kev.inburke.com/kevin/the-best-ways-to-find-bugs-in-your-code/
- PSP http://en.wikipedia.org/wiki/Personal_Software_Process
- IBM Jazz, Spezifikationen zur Integration aller Tools eines Entwicklungsprozesses http://www.jazz.net
- UNICASE (frueher Sysiphus), wie IBM Jazz, entwickelt als open source von TU Muenchen http://sysiphus.in.tum.de/
