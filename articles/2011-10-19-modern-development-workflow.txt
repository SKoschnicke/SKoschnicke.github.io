title: "Modern development workflow"
date: 2011/10/19
slug: modern-development-workflow

Developing high-quality software in little time is hard when you are a single
developer, but it gets even harder when you are a group of developers working
on the same project. Technology can enable us to work better together without
forcing everyone into tight regulations on how, when and where they do their
work.

Of course, without some rules about the workflow, structured collaboration is
unlikely to happen, so there needs to be some rules, but they should not
get into the way of the real work. I will describe a workflow that does just
that by using modern technologies to support developers at every possible
degree.

Motivationen

Irgendwann geraet man in die Situation wo selbstorganisiertes Zusammenarbeiten nicht mehr funktioniert weil
- neue Leute zum Team dazukommen
- das Team zu gross wird
- die Codebase zu gross wird, als dass jeder immer alle Teile im Blick behalten kann
- Fehler oder doppelte Implementierungen entstehen, weil der eine nicht weiss was der andere gemacht hat

Warum ein Chat?

Direkte Kommunikation ist meistens klarer und schneller. Aber:
- erfordert oertliche Naehe
- findet nur zwischen zwei Personen statt -> alle anderen bekommen nichts mit
  oder
- alle koennen/muessen (Meeting) mithoeren -> Zeit wird verschwendet da die Leute nicht selbst filtern koennen (Meeting) oder gerade was anderes tun wollen (Grossraumbuero)
- ist synchron, man kann etwas besprochenes nicht spaeter nachlesen

Tools:
- Git, http://whygitisbetterthanx.com
- GitHub
  - Wiki (oder irgendein anderes Wiki)
  - Pull requests
- Realtime-Chat: Flowdock / Campfire / IRC / Skype
- Quassum (oder GitHub Issues, PivotalTracker)

Vorteile:
- Asynchronitaet
- Standortunabhaengigkeit
- Wissenstransfer (durch die Pull-Requests)
- Skaliert (GitHub benutzt es mit [to_research] Mitarbeitern)

Weiteres:
- Stackoverflow
- Bezug auf Scrum und Agile Manifesto
- Automatisierung aller Schritte ist wichtig (vor allem build, release, deploy), wird aber nicht weiter behandelt, evtl. kurz erwaehnen
- Wie ein Workflow helfen kann die Qualitaet der Software zu erhoehen http://kev.inburke.com/kevin/the-best-ways-to-find-bugs-in-your-code/
